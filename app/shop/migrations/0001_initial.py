# Generated by Django 4.2.6 on 2023-10-30 05:58

import colorfield.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import shortuuid.django_fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, help_text='Upload avatar of the user', null=True, upload_to='avatars/%Y/%m/%d/')),
                ('sex', models.CharField(choices=[('Female', 'Female'), ('Male', 'Male')], help_text='Sex of the user', max_length=6)),
                ('address', models.TextField(blank=True, help_text='Address of the user', null=True)),
                ('phone', models.CharField(blank=True, help_text='Phone number of the user', max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ('last_name', 'first_name'),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this model should be treated as active. Unselect this instead of deleting models.', verbose_name='Active')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Required. 90 characters or fewer.', max_length=90, unique=True)),
                ('slug', models.SlugField(blank=True, help_text='URL safe slug for category', null=True, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='ColorVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this model should be treated as active. Unselect this instead of deleting models.', verbose_name='Active')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('value', colorfield.fields.ColorField(default='#FFFFFF', help_text='Color of the product', image_field=None, max_length=25, samples=None, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Colors',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this model should be treated as active. Unselect this instead of deleting models.', verbose_name='Active')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('id', shortuuid.django_fields.ShortUUIDField(alphabet='123467890', help_text='UUID of this product', length=5, max_length=8, prefix='OD#', primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-date_created', 'is_active'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SizeVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this model should be treated as active. Unselect this instead of deleting models.', verbose_name='Active')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('value', models.CharField(choices=[('S', 'S'), ('M', 'M'), ('L', 'L')], help_text='Size of the product', max_length=1, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Sizes',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this model should be treated as active. Unselect this instead of deleting models.', verbose_name='Active')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Enter a name', max_length=50, unique=True)),
                ('slug', models.SlugField(blank=True, help_text='URL safe slug for tag', null=True, unique=True)),
            ],
            options={
                'ordering': ('-date_created', 'is_active'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShippingAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=200, null=True)),
                ('city', models.CharField(blank=True, max_length=200, null=True)),
                ('postal', models.CharField(blank=True, max_length=200, null=True)),
                ('country', models.CharField(blank=True, max_length=200, null=True)),
                ('order', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='shop.order')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this model should be treated as active. Unselect this instead of deleting models.', verbose_name='Active')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('id', shortuuid.django_fields.ShortUUIDField(alphabet='123467890', help_text='UUID of this product', length=5, max_length=8, prefix='SP#', primary_key=True, serialize=False, verbose_name='SKU')),
                ('image', models.ImageField(blank=True, help_text='Image of this product', null=True, upload_to='products/%Y/%m/%d/')),
                ('title', models.CharField(help_text='Title of this product', max_length=255, unique=True)),
                ('slug', models.SlugField(blank=True, help_text='URL safe slug for product', null=True, unique=True)),
                ('price', models.FloatField(default=0.0, help_text='Price for this product')),
                ('discount', models.FloatField(default=0.0, help_text='Discount of this product')),
                ('description', models.TextField(blank=True, help_text='Description about the product', null=True)),
                ('amount', models.IntegerField(default=1, help_text='Amount of the product')),
                ('category', models.ForeignKey(help_text='Category of this product', on_delete=django.db.models.deletion.CASCADE, to='shop.category')),
                ('color_variant', models.ManyToManyField(blank=True, help_text='Color value of the product', to='shop.colorvariant')),
                ('size_variant', models.ManyToManyField(blank=True, help_text='Size value of the product', to='shop.sizevariant')),
                ('tags', models.ManyToManyField(help_text='Tags of the product', related_name='tags', to='shop.tag')),
            ],
            options={
                'index_together': {('id', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(blank=True, default=0, null=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.product')),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', shortuuid.django_fields.ShortUUIDField(alphabet='123467890', help_text='UUID of this employee', length=6, max_length=9, prefix='EM#', primary_key=True, serialize=False)),
                ('department', models.CharField(max_length=100, unique=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this model should be treated as active. Unselect this instead of deleting models.', verbose_name='Active')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('content', models.TextField()),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this model should be treated as active. Unselect this instead of deleting models.', verbose_name='Active')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('rate', models.SmallIntegerField(default=0)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'unique_together': {('product', 'user')},
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this model should be treated as active. Unselect this instead of deleting models.', verbose_name='Active')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('liked', models.BooleanField(default=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
                'unique_together': {('product', 'user')},
            },
        ),
    ]
